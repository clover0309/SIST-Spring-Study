<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
  <!-- 원할한 어노테이션 사용을 위한 어노테이션 드리븐 사용 -->
  <mvc:annotation-driven/>

  <!-- jdbc.properties파일을 로드하기 위해 context라는 네임스페이스가 필요하다. -->
  <context:property-placeholder location="classpath:mybatis/props/jdbc.properties"/>


  <!-- 아파치의 dbcp라이브러리가 제공하는 BasicDataSource를 생성한다. -->
  <!-- 참조하려면 id가 존재해야함. -->
  <bean id="ds"
        class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
    <!-- mysql을 mybatis와 연결하는 기본설정 -->
    <!-- setter injection
    BasicDataSource 메서드안에 들어있는 멤버변수들을 설정해주는 곳 -->
    <property name="driverClassName" value="${jdbc.driver}"/> <!--setDriverClassName() 함수 호출 -->
    <property name="url" value="${url}"/> <!-- setUrl()함수 호출 -->
    <property name="username" value="${jdbc.user}"/> <!-- setUsername() 함수 호출 -->
    <property name="password" value="${jdbc.pwd}"/> <!-- setPassword() 함수 호출 -->

    <!-- 동시에 사용할 수 있는 최대 커넥션 수 -->
    <property name="maxActive" value="${jdbc.maxActive}"/> <!-- setMaxActive() 함수 호출 -->

    <!-- 커넥션 풀에 반납할 때 최대로 유지되는 커넥션 수 -->
    <property name="maxIdle" value="${jdbc.maxIdle}"/> <!-- setMaxIdel() 함수 호출 -->

    <!-- 커넥션 풀에 반납할 때 최소로 유지되는 커넥션 수 -->
    <property name="minIdle" value="${jdbc.minIdle}"/> <!-- setMinIdel() 함수 호출 -->
  </bean>

  <!-- mybatis-spring 라이브러리가 제공하는 FactoryBean 객체 생성
  이 객체는 DataSource가 있어야 생성할 수 있다. -->
  <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 앞서 생성된 BasicDataSource를 현재 객체의 변수들 중
        dataSource라는 변수에 저장해야한다. -->
    <property name="dataSource" ref="ds"/>

    <!-- 맵퍼들의 위치 지정 -->
    <property name="mapperLocations" value="classpath:mybatis/mapper/**/*.xml"/>
  </bean>

  <!-- factory를 통해 SqlSession과 같은 객체 생성 -->
  <!-- 기본생성자가 없으므로, 생성자 인젝션을 줘야함. -->
  <bean id="sqlsession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg ref="factory"/> <!--위에서 만든 factory를 참조해야함 -->
  </bean>


  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="ds"/>
  </bean>
  <!-- DAO 생성 그리고 위에서 생성된 SqlSession을 DAO안에 있는 ss에 저장해야함. -->
  <!--    <bean class="mybatis.dao.EmpDAO">-->
  <!--        &lt;!&ndash;여기서 setterInjection으로 사용 &ndash;&gt;-->
  <!--        <property name="ss" ref="sqlsession"/>-->
  <!--    </bean>-->

  <context:component-scan base-package="mybatis.dao"/>
</beans>